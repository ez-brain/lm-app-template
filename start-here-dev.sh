#!/bin/bash

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Function to print colored output
print_color() {
    color=$1
    message=$2
    echo -e "${color}${message}${NC}"
}

# Banner
print_color "$BLUE" "================================================"
print_color "$BLUE" "   Next.js App Template Setup Script"
print_color "$BLUE" "================================================"
echo

# Function to check if port is a valid number
is_valid_port() {
    if [[ $1 =~ ^[0-9]+$ ]] && [ $1 -ge 1 ] && [ $1 -le 65535 ]; then
        return 0
    else
        return 1
    fi
}

# Function to check if port is in use
is_port_in_use() {
    if command -v lsof &> /dev/null; then
        lsof -i:$1 &> /dev/null
        return $?
    else
        # If lsof is not available, skip the check
        return 1
    fi
}

# Get the app identifier (port)
while true; do
    print_color "$YELLOW" "Enter your app identifier (port number, e.g., 5555):"
    read -p "> " APP_ID
    
    if ! is_valid_port "$APP_ID"; then
        print_color "$RED" "‚ùå Invalid port number. Please enter a number between 1 and 65535."
        continue
    fi
    
    if is_port_in_use "$APP_ID"; then
        print_color "$RED" "‚ö†Ô∏è  Warning: Port $APP_ID appears to be in use."
        read -p "Continue anyway? (y/n): " -n 1 -r
        echo
        if [[ ! $REPLY =~ ^[Yy]$ ]]; then
            continue
        fi
    fi
    
    break
done

# Get the app name
while true; do
    print_color "$YELLOW" "Enter your app name (e.g., my-awesome-app):"
    read -p "> " APP_NAME
    
    # Validate app name (alphanumeric and hyphens only)
    if [[ ! $APP_NAME =~ ^[a-zA-Z0-9-]+$ ]]; then
        print_color "$RED" "‚ùå Invalid app name. Use only letters, numbers, and hyphens."
        continue
    fi
    
    break
done

# Get the app title
print_color "$YELLOW" "Enter your app title (e.g., My Awesome App):"
read -p "> " APP_TITLE

# Get the app description
print_color "$YELLOW" "Enter your app description:"
read -p "> " APP_DESCRIPTION

# Summary
echo
print_color "$GREEN" "üìã Configuration Summary:"
echo "  ‚Ä¢ Identifier (Port): $APP_ID"
echo "  ‚Ä¢ App Name: $APP_NAME"
echo "  ‚Ä¢ App Title: $APP_TITLE"
echo "  ‚Ä¢ App Description: $APP_DESCRIPTION"
echo
print_color "$YELLOW" "Proceed with these settings? (y/n)"
read -p "> " -n 1 -r
echo

if [[ ! $REPLY =~ ^[Yy]$ ]]; then
    print_color "$RED" "‚ùå Setup cancelled."
    exit 1
fi

# Start the replacement process
echo
print_color "$BLUE" "üîß Applying configuration..."

# 1. Rename the route folder
print_color "$GREEN" "‚úì Updating route structure..."
if [ -d "app/lm-app/13000" ]; then
    mv app/lm-app/13000 "app/lm-app/$APP_ID" 2>/dev/null || {
        print_color "$RED" "‚ùå Failed to rename route folder. It may already be renamed."
    }
else
    print_color "$YELLOW" "‚ö†Ô∏è  Route folder already renamed or doesn't exist."
fi

# 2. Update page.tsx in the route
print_color "$GREEN" "‚úì Updating page component..."
if [ -f "app/lm-app/$APP_ID/page.tsx" ]; then
    sed -i.bak "s|/lm-app/13000|/lm-app/$APP_ID|g" "app/lm-app/$APP_ID/page.tsx" && rm "app/lm-app/$APP_ID/page.tsx.bak"
else
    print_color "$RED" "‚ùå Could not find app/lm-app/$APP_ID/page.tsx"
fi

# 3. Update main page.tsx
print_color "$GREEN" "‚úì Updating main page link..."
if [ -f "app/page.tsx" ]; then
    sed -i.bak "s|/lm-app/13000|/lm-app/$APP_ID|g" app/page.tsx && rm app/page.tsx.bak
fi

# 4. Update Dockerfile
print_color "$GREEN" "‚úì Updating Dockerfile..."
if [ -f "Dockerfile" ]; then
    sed -i.bak "s|ENV PORT=13000|ENV PORT=$APP_ID|g" Dockerfile
    sed -i.bak "s|EXPOSE 13000|EXPOSE $APP_ID|g" Dockerfile
    rm Dockerfile.bak 2>/dev/null
fi

# 5. Update layout.tsx with app title and description
print_color "$GREEN" "‚úì Updating app metadata..."
if [ -f "app/layout.tsx" ]; then
    sed -i.bak "s|Create Next App|$APP_TITLE|g" app/layout.tsx
    sed -i.bak "s|Generated by create next app|$APP_DESCRIPTION|g" app/layout.tsx
    rm app/layout.tsx.bak 2>/dev/null
fi

# 6. Update next.config.ts with new path
print_color "$GREEN" "‚úì Updating next.config.ts..."
if [ -f "next.config.ts" ]; then
    sed -i.bak "s|'/lm-app/13000'|'/lm-app/$APP_ID'|g" next.config.ts
    rm next.config.ts.bak 2>/dev/null
fi

# 7. Update package.json with app name
print_color "$GREEN" "‚úì Updating package.json..."
if [ -f "package.json" ]; then
    sed -i.bak "s|\"name\": \"void-next\"|\"name\": \"$APP_NAME\"|g" package.json
    rm package.json.bak 2>/dev/null
fi

# 8. Create a .env.local file with the port
print_color "$GREEN" "‚úì Creating .env.local..."
echo "# App Configuration" > .env.local
echo "APP_ID=$APP_ID" >> .env.local
echo "APP_NAME=$APP_NAME" >> .env.local

# Done!
echo
print_color "$GREEN" "‚úÖ Setup complete!"
echo
print_color "$BLUE" "üìù Next steps:"
echo "  1. Install dependencies: npm install"
echo "  2. Run development server: npm run dev"
echo "     Your app will be at: http://localhost:3000/lm-app/$APP_ID"
echo
echo "  3. Build Docker image: docker build -t $APP_NAME ."
echo "  4. Run container: docker run -p $APP_ID:$APP_ID $APP_NAME"
echo "     Your app will be at: http://localhost:$APP_ID/lm-app/$APP_ID"
echo
print_color "$YELLOW" "üí° Tip: Check README.dev.md for more detailed instructions!"
